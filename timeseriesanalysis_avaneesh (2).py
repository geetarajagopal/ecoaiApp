# -*- coding: utf-8 -*-
"""TimeSeriesAnalysis_Avaneesh.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mydpg4PEutHrTEC022bWkUvQh3-wsNCm
"""

# prompt: google drive connect

from google.colab import drive
drive.mount('/content/drive')

!pip freeze > requirements.txt

csv_path = "/content/drive/MyDrive/data_old.csv"
"/content/drive/MyDrive/HumidityForecast/indoor2.csv"
#"/content/drive/MyDrive/HumidityForecast/Data_TimeSeries.csv"
import pandas as pd

import numpy as np

import seaborn as sns

import matplotlib.pyplot as plt

from sklearn.metrics import mean_squared_error

from math import sqrt

from statistics import mean

import ast

data = pd.read_csv(csv_path)

print(data.shape)
data

data.columns=['Date','Humidity','Temperature','Current_Temp','Current_Humidity','Forecast_Temp','Forecast_Humidity']

data = data.dropna(subset=['Date','Humidity','Temperature','Current_Temp','Current_Humidity','Forecast_Temp','Forecast_Humidity'])

#pd.to_datetime(data["Date"].iloc[0],
#               format='%Y-%m-%d %H:%M:%S.%f')
data.Date = pd.to_datetime(data["Date"],
               format='%Y-%m-%d %H:%M:%S.%f')
data.index = data['Date']
#data = data.rename(columns={'Temperature':'Humidity', 'Humidity':'Temperature'})

data = data.drop(data[data['Humidity'] >= 100].index)
#data = data.drop(data[data['Humidity'] <= 75].index)

data = data.loc[data.Date >= '2024-02-07 12:10:04']
#2024-02-12 18:40:09
#data = data.drop()
data_ML_factors = data[['Temperature','Current_Temp','Current_Humidity']]
data_ML_Y = data[['Humidity']]

from sklearn.linear_model import LinearRegression
from sklearn import svm
X = data_ML_factors.to_numpy()
y = data_ML_Y.to_numpy()

reg = LinearRegression().fit(X,y)
svc = svm.SVR(kernel='sigmoid').fit(X,y)
print(str(reg.coef_))

y

len(data)

data.shape

plt.figure(figsize=(12,8))

plt.plot(data.Date, data['Humidity'], label='Humidity data')

plt.legend(loc='best')
plt.title("Humidity Data")
plt.show()

plt.plot(data.Date, data['Temperature'], label='Temperature data')

plt.legend(loc='best')
plt.title("Temperature Data")
plt.show()

data_feat = pd.DataFrame({"year": data['Date'].dt.year,
                          "month": data['Date'].dt.month,
                          "day": data['Date'].dt.day,
                          "dayofyear": data['Date'].dt.dayofyear,
                          "week": data['Date'].dt.week,
                          "weekday": data['Date'].dt.dayofweek,
                          "quarter": data['Date'].dt.quarter,
                         })
data_feat.head()

import json
#data['Forecast'] = json.loads(data['Forecast'].to_json(orient='records'))
#type((data['Forecast'].values[0]))

#print(len(ast.literal_eval(data["Forecast"].iloc[0])['hourly']))

#dict_string = data['Forecast'].iloc[0]
#print((len(data)))
temp = []
humidity = []
forecast_temp = []
forecast_humidity = []

for i in range(len(data)):
  temp.append(data['Current_Temp'].iloc[i]- 273.15)
  humidity.append(data['Current_Humidity'].iloc[i])
  #forecast_list = ast.literal_eval(data["Forecast"].iloc[i])['hourly'][0]
  #data['Forecast_Temp'] = data['Forecast_Temp'].astype(float)
  #data['Forecast_Humidity'] = data['Forecast_Humidity'].astype(float)
  #print(type(data['Forecast_Temp']))
  temp_list_temp = data['Forecast_Temp'].iloc[i].strip('][').split(', ')
  temp_list_humidity = data['Forecast_Humidity'].iloc[i].strip('][').split(', ')
  fore_temperature = []
  fore_humidity = []
  #print(temp_list_temp)
  for x in range(len(temp_list_humidity)):
    fore_temperature.append(float(temp_list_temp[x]) - 273.15)
    fore_humidity.append(temp_list_humidity[x])
  forecast_temp.append(fore_temperature)
  forecast_humidity.append(fore_humidity)
  #forecast_humidity.append(ast.literal_eval(data["Forecast"].iloc[i])['hourly'][0]['humidity'])
  #print(str(i))
  i = i + 1
data['Current_Temp'] = temp
data['Current_Humidity'] = humidity
data['Forecast_Temp'] = forecast_temp
data['Forecast_Humidity'] = forecast_humidity
#print(json.dumps(data.reset_index(drop=True)["Forecast"].to_string()))
#print(type(data.reset_index(drop=True)["Forecast"].to_string()))

data

"""Trials"""

#ast.literal_eval(data["Forecast"].iloc[378])['current']['temp']

data["Current_Temp"].iloc[0]

complete_data = pd.concat([data_feat, data], axis=1)
complete_data.head()

complete_data['Date'] = pd.to_datetime(complete_data['Date'])
complete_data = complete_data.set_index('Date')
complete_data.Humidity = complete_data.Humidity.astype(float)

complete_data['Humidity'] = complete_data['Humidity'].astype(float)
complete_data.dtypes

#SMA
complete_data['SMA_10_temp'] = complete_data.Temperature.rolling(10,min_periods=1).mean()
complete_data['SMA_20_temp'] = complete_data.Temperature.rolling(20,min_periods=1).mean()

complete_data['SMA_10_humidity'] = complete_data.Humidity.rolling(10,min_periods=1).mean()
complete_data['SMA_20_humidity'] = complete_data.Humidity.rolling(20,min_periods=1).mean()
#CMA
complete_data['CMA_temp'] = complete_data.Temperature.expanding().mean()
complete_data['CMA_humidity'] = complete_data.Humidity.expanding().mean()

#EMA
complete_data['ewm_0.1_temp'] = complete_data.Temperature.ewm(alpha=0.1,adjust=False).mean()
complete_data['ewm_0.3_temp'] = complete_data.Temperature.ewm(alpha=0.3,adjust=False).mean()
complete_data['ewm_0.1_humidity'] = complete_data.Humidity.ewm(alpha=0.1,adjust=False).mean()
complete_data['ewm_0.3_humidity'] = complete_data.Humidity.ewm(alpha=0.3,adjust=False).mean()


colors = ['green','red','orange']
complete_data[['Humidity','SMA_10_humidity','CMA_humidity','ewm_0.1_humidity']].plot(figsize=(12,6))
complete_data[['Temperature','SMA_10_temp','CMA_temp','ewm_0.1_temp']].plot(figsize=(12,6))

complete_data.columns

import statsmodels
from statsmodels.graphics.tsaplots import plot_acf
plot_data = complete_data[['Humidity', 'Temperature', 'Current_Temp','Current_Humidity', 'Forecast_Temp', 'Forecast_Humidity', 'SMA_10_temp', 'SMA_20_temp', 'SMA_10_humidity','SMA_20_humidity', 'CMA_temp', 'CMA_humidity', 'ewm_0.1_temp','ewm_0.3_temp','ewm_0.1_humidity','ewm_0.3_humidity']]
plot_data.corr()

from matplotlib import pyplot
from pandas.plotting import lag_plot
lag_plot(plot_data[['Temperature','Humidity']])
pyplot.show()

from matplotlib import pyplot
from statsmodels.tsa.ar_model import AutoReg
from sklearn.metrics import mean_squared_error
from math import sqrt
#from sklearn.model_selection import train_test_split
X = plot_data[['Temperature','Current_Temp','Current_Humidity','SMA_10_temp', 'SMA_20_temp', 'SMA_10_humidity','SMA_20_humidity', 'CMA_temp', 'CMA_humidity', 'ewm_0.1_temp','ewm_0.3_temp']].astype(float)
y = plot_data['Humidity'].astype(float)
#X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42)

y_to_train = y[:'2024-01-31']
y_to_test = y['2024-02-01':]

len(y_to_test)

plt.figure(figsize=(10,6))
plt.plot(plot_data['Humidity'], )
plt.title('Humidity Week Trend')
plt.show()
plt.figure(figsize=(10,6))
plt.plot(plot_data['Temperature'], )
plt.title('Temperature Week Trend')
plt.show()
plt.figure(figsize=(10,6))
#plt.plot( plot_data['Forecast_Temp'], )
#plt.title('Forecast Temp Week Trend')
#plt.show()
#plt.figure(figsize=(10,6))
#plt.plot( plot_data['Forecast_Humidity'], )
#plt.title('Forecast Humidity Week Trend')
#plt.show()

plot_data.index

from statsmodels.tsa.arima.model import ARIMA

model_humid = ARIMA(plot_data['Humidity'], order=(1,0,0))
model_fit_humid = model_humid.fit()
prediction_humid = model_fit_humid.forecast(steps=50)

model_temp = ARIMA(plot_data['Temperature'], order=(1,0,0))
model_fit_temp = model_temp.fit()
prediction_temp = model_fit_temp.forecast(steps=50)
complete_data.index = pd.DatetimeIndex(complete_data.index).to_period('min')
print(complete_data.index[-1])
label = complete_data.index[-1]+60
label
data = [[prediction_temp.iloc[12],float(plot_data['Forecast_Humidity'][-1][0]),plot_data['Forecast_Temp'][-1][0]]]
data_ML_test = pd.DataFrame(data)
print("Prediction for time:",label)
print("data",data)
print(reg.predict(np.array(data)))
print(svc.predict(np.array(data)))

data

df_originalData = plot_data[['Humidity','Temperature']]

prediction_temp.name = 'Temperature'
prediction_humid.name = 'Humidity'

df_originalData.index

df_originalData.index = pd.DatetimeIndex(df_originalData.index).to_period('min')
label = df_originalData.index[-1]+5
idx = pd.date_range(str(label),periods=50,freq='5min')
df_forecast_arima = pd.concat([prediction_humid,prediction_temp],axis=1).set_index(idx)
df_forecast_arima = df_forecast_arima.rename(columns={'predicted_mean':'Humidity','predicted_mean':'Temperature'})
len_total = len(df_originalData) + len(df_forecast_arima)
label = df_originalData.index[0]
idx = pd.date_range(str(label),periods=len_total,freq='5min')
df_withforecast_arima = pd.concat([df_originalData,df_forecast_arima]).set_index(idx)

df_forecast_arima

plt.figure(figsize=(10,6))
plt.plot(df_withforecast_arima.index,df_withforecast_arima['Humidity'].values)

plt.axvline(x = df_withforecast_arima.index[len(df_originalData)], color = 'b', label = 'axvline - full height')
#plt.plot(df_withforecast.index[len(df_multivariatedata)],0,color='green', linestyle='dashed')
plt.title('Humidity Week Trend')
plt.show()
plt.figure(figsize=(10,6))
plt.plot(df_withforecast_arima.index,df_withforecast_arima['Temperature'].values)
plt.axvline(x = df_withforecast_arima.index[len(df_originalData)], color = 'b', label = 'axvline - full height')
plt.title('Temperature Week Trend')
plt.show()

df_multivariatedata = complete_data[['Humidity','Temperature']].astype(float)

#df_multivariatedata.index = pd.DatetimeIndex(df_multivariatedata.index).to_period('min')

from statsmodels.tsa.stattools import adfuller
result = adfuller(df_multivariatedata['Humidity'],autolag='AIC')
result = adfuller(df_multivariatedata['Temperature'],autolag='AIC')

labels=['ADF test statistic','p-value','# lags used','# observations']
out = pd.Series(result[0:4],index=labels)
for key,val in result[4].items():
  out[f'critical value ({key})']=val
print(out.to_string())

train = df_multivariatedata[:int(0.8*(len(df_multivariatedata)))]
valid = df_multivariatedata[int(0.8*(len(df_multivariatedata))):]

from statsmodels.tsa.vector_ar.var_model import VAR
valid_len = len(valid)
model= VAR(endog = train)
model_fit = model.fit()

model_fit.summary()
prediction = model_fit.forecast(valid.values[-valid_len:],steps=valid_len)

df_multivariatedata.index[-1]+5

label = df_multivariatedata.index[-1]+5
idx = pd.date_range(str(label),periods=valid_len,freq='5min')
df_forecast = pd.DataFrame(data=prediction,index=idx, columns=['Humidity','Temperature'])

df_forecast.head(12)

#train = df_multivariatedata[:int(0.8*(len(df_multivariatedata)))]
#valid = df_multivariatedata[int(0.8*(len(df_multivariatedata))):]

#from statsmodels.tsa.vector_ar.var_model import VAR
valid_len = len(valid)
model= VAR(endog = df_multivariatedata)
model_fit = model.fit()

model_fit.summary()
prediction = model_fit.forecast(df_multivariatedata.values,steps=50)

label = df_multivariatedata.index[-1]+5
idx = pd.date_range(str(label),periods=50,freq='5min')
df_forecast = pd.DataFrame(data=prediction,index=idx, columns=['Humidity','Temperature'])
len_total = len(df_multivariatedata) + len(df_forecast)
label = df_multivariatedata.index[0]
idx = pd.date_range(str(label),periods=len_total,freq='5min')
"""label = str(df_multivariatedata.index[-1]+5)
#idx_initial = df_multivariatedata.index
idx_forecast = pd.period_range(str(label),periods=50,freq='5min')
df_forecast = pd.DataFrame(data=prediction,index=idx_forecast, columns=['Humidity','Temperature'])
len_total = len(df_multivariatedata) + len(df_forecast)
label = df_multivariatedata.index[0]
#df_multivariatedata = df_multivariatedata.resample('5min')
#idx_whole = pd.concat([idx_initial.to_series(),idx_forecast.to_series()])
idx_whole = pd.period_range(str(label),periods=len(pd.concat([df_multivariatedata,df_forecast],ignore_index=True)),freq='5min')
df_withforecast = pd.concat([df_multivariatedata,df_forecast],ignore_index=True)
df_withforecast.index = idx_whole
df_withforecast.index.name = "Date"""
df_withforecast = pd.concat([df_multivariatedata,df_forecast],axis = 0)
#df_withforecast.index = idx

df_withforecast

#df_withforecast = df_withforecast.reset_index(drop=False)
#df_withforecast = df_withforecast.rename(columns={"index":"Date"})
df_withforecast.index.name = "Date"
df_withforecast = df_withforecast.reset_index(drop=False)
df_withforecast["Date"] = pd.to_datetime(df_withforecast["Date"].astype(str))
df_withforecast.head(5)
df_withforecast.columns

#df_withforecast.index = pd.to_datetime(df_withforecast.index )

df_withforecast['Humidity'] = df_withforecast['Humidity'].astype(float)
df_withforecast['Temperature'] = df_withforecast['Temperature'].astype(float)
#df_withforecast.index = df_withforecast.index.astype(str)
plt.figure(figsize=(10,6))
plt.plot(df_withforecast.index,df_withforecast['Humidity'].values)

plt.axvline(x = df_withforecast.index[len(df_multivariatedata)], color = 'b', label = 'axvline - full height')
#plt.plot(df_withforecast.index[len(df_multivariatedata)],0,color='green', linestyle='dashed')
plt.title('Humidity Week Trend')
plt.show()
plt.figure(figsize=(10,6))
plt.plot(df_withforecast.index,df_withforecast['Temperature'].values)
plt.axvline(x = df_withforecast.index[len(df_multivariatedata)], color = 'b', label = 'axvline - full height')
plt.title('Temperature Week Trend')
plt.show()

!pip install dash

import dash
from dash import Dash, html, dcc, callback, Output, Input, dash_table
import plotly.express as px
import pandas as pd

#df = pd.read_csv('/content/drive/MyDrive/data.csv')

app = Dash(__name__)
server = app.server
app.layout = html.Div([
    html.H1(children='Title of Dash App', style={'textAlign':'center'}),
    dash_table.DataTable(data=df_withforecast.to_dict('rows'),page_size=10),
    dcc.Graph(figure=px.line(data_frame=df_withforecast[['Date','Temperature']],x='Date',y="Temperature",title="Temperature Trend")),
    dcc.Graph(figure=px.line(data_frame=df_withforecast[['Date','Humidity']],x='Date',y="Humidity",title="Humidity Trend"))
    #dcc.Dropdown(df_withforecast.columns, 'Humidity', id='dropdown-selection'),
    #dcc.Textarea(id='id-textarea',value='value'),
    #dcc.Graph(figure=px.line(df_withforecast.index,df_withforecast['Humidity'].values))
    ])

'''@callback(
    Output('id-textarea', 'value'),
    Input('dropdown-selection', 'value')
)
def update_graph(value):

    dff = df_withforecast[value].values

    fig = px.plot(df_withforecast.index,dff)

    return  dff[0]'''
if __name__ == '__main__':
    app.run(debug=False)